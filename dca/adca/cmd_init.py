"""
Functions to create yaml files and demo data
"""

import datetime as dt
import pathlib
import string
from importlib.metadata import version

import numpy as np
import scipy as sp

from dca.adca.well import Well, WellGroup

INIT_YAML = string.Template(
    """# ${header_message}
# For more info: https://dsadocs.equinor.com/docs/decline-curve-analysis/index.html

# A group is a collection of wells run together.
- group:
  name: "demo_wells"

  # Data source settings
  source:
    # name: "PDM"
    # table: "PDMVW.WB_PROD_DAY"
    name: "file"
    table: "${csv_filename}"
    phases: ["oil"]
    frequency: "monthly"

  # The wells included in this group. They can be split into segments.
  wells:
${well_names}
    # - ["2011-07", null] # A segmented well, only this segment is kept

  # Options for data processing: "producing_time" and "calendar_time"
  preprocessing: "producing_time"

  curve_fitting:
    # How to split the times series for (1) out-of-sample error reporting and
    # (2) hyperparameter tuning.
    # float -> split time series by fraction (between 0 and 1)
    # int -> split time series by time index (negative or positive)
    # date -> split time series by this date (format "YYYY-MM-DD" or "YYYY-MM")
    split : 0.8

    # What kind of decline curve to use. Options: "arps" or "exponential"
    curve_model : "arps"

    # in units of input resolution, e.g., months or days
    forecast_periods : 72

  # Hyperparameters given as numbers are fixed, and those given as
  # a range [low, high] are tuned out-of-sample on test data using the split
  hyperparameters:
    half_life : [6, 60]
    prior_strength : [0.001, 1]
"""
)


def init_yaml_and_csv(filename):
    """Initialize a YAML file and a CSV file with random wells."""

    # Create the filenames
    csv_filename = pathlib.Path(f"{filename}.csv")
    yaml_filename = pathlib.Path(f"{filename}.yaml")

    if csv_filename.exists():
        print(f"File already exists: {csv_filename}")
    if yaml_filename.exists():
        print(f"File already exists: {yaml_filename}")

    if csv_filename.exists() or yaml_filename.exists():
        exit(1)

    # Create the CSV file
    df = random_wells_csv(csv_filename)
    print(f"Created file: {csv_filename}")
    well_names = list(df.well_id.unique())  # Get well names for .yaml

    # Dynamically create header information
    adca_version = version("dca")
    date_str = dt.datetime.now().strftime("%c")
    header_message = f"Generated by ADCA {adca_version} on {date_str}"

    # Create the YAML file
    yaml = INIT_YAML.substitute(
        csv_filename=csv_filename,
        well_names="\n".join(f'    "{name}":' for name in well_names),
        header_message=header_message,
    )
    with open(yaml_filename, "w") as file_handle:
        file_handle.write(yaml)
    print(f"Created file: {yaml_filename}")
    exit(0)


def random_wells_csv(filename):
    """Generate random wells and save them to a CSV file."""

    rng = np.random.default_rng(42)

    # A good well, with realistic parameters
    well_1 = Well.generate_random(
        n=36,
        freq="M",
        seed=1,
        id="arps_well",
        curve_model="arps",
        curve_parameters=(18, 7, 6),
        std=0.15,
    )

    # Another well, with an initial ramp-up
    well_2 = Well.generate_random(
        n=36,
        freq="M",
        seed=2,
        id="ramp_up_well",
        curve_model="arps",
        curve_parameters=(13, 3, -6),
        std=0.05,
    )
    x_grid, *_ = well_2.get_curve_data()
    well_2.production = well_2.production * sp.special.expit(x_grid - 5)

    # Very little data
    well_3 = Well.generate_random(
        n=6,
        freq="M",
        seed=3,
        id="little_data_well",
        curve_model="arps",
        curve_parameters=(14, 3, -6),
        std=0.05,
    )

    # A well with a lot of noise
    well_4 = Well.generate_random(
        n=24,
        freq="M",
        seed=4,
        id="noisy_well",
        curve_model="arps",
        curve_parameters=(14, 3, -2),
        std=0.33,
    )

    # A constant well
    well_5 = Well.generate_random(
        n=24,
        freq="M",
        seed=5,
        id="constant_well",
        curve_model="constant",
        curve_parameters=(11,),
        std=0.1,
    )

    # A good well, with lots of data
    well_6 = Well.generate_random(
        n=72,
        freq="M",
        seed=6,
        id="long_declining_well",
        curve_model="arps",
        curve_parameters=(18, 7, 6),
        std=0.15,
    )

    # A well with a clear plateu
    well_7 = Well.generate_random(
        n=36,
        freq="M",
        seed=7,
        id="plateu_well",
        curve_model="arps",
        curve_parameters=(13, 3, -6),
        std=0.05,
    )
    well_7.production[:12] = rng.normal(loc=12_000, scale=500, size=12)

    # Create a dataframe and save it
    wellgroup = WellGroup([well_1, well_2, well_3, well_4, well_5, well_6, well_7])
    df = wellgroup.to_df(forecast_periods=0)
    df.to_csv(filename, index=False)
    return df


if __name__ == "__main__":
    import pytest

    pytest.main(args=[__file__, "--doctest-modules", "-v", "--capture=sys"])
